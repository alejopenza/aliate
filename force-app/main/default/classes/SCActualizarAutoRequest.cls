//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class SCActualizarAutoRequest {

	public class Accesories {
		public AccesoryType AccesoryType {get;set;} 
		public String Brand {get;set;} 
		public InsuredAmountCost InsuredAmountCost {get;set;} 
		public String Model {get;set;} 
		public Object OtherAccesoryTypeName {get;set;} 
		public String SerieNumber {get;set;} 

		public Accesories(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'AccesoryType') {
							AccesoryType = new AccesoryType(parser);
						} else if (text == 'Brand') {
							Brand = parser.getText();
						} else if (text == 'InsuredAmountCost') {
							InsuredAmountCost = new InsuredAmountCost(parser);
						} else if (text == 'Model') {
							Model = parser.getText();
						} else if (text == 'OtherAccesoryTypeName') {
							OtherAccesoryTypeName = parser.readValueAs(Object.class);
						} else if (text == 'SerieNumber') {
							SerieNumber = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Accesories consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Vehicle {
		public List<Accesories> Accesories {get;set;} 
		public AccesoryType AdditionalFuelType {get;set;} 
		public List<AdditionalInterestContacts> AdditionalInterestContacts {get;set;} 
		public AccesoryType AutomaticAdjust {get;set;} 
		public AccesoryType BonusMalus {get;set;} 
		public Integer BrandCode {get;set;} 
		public String BrandName {get;set;} 
		public Object CNRT {get;set;} 
		public AccesoryType Category {get;set;} 
		public Object Census {get;set;} 
		public Object CertificateDateGeneration {get;set;} 
		public Object CertificateNumber {get;set;} 
		public AccesoryType Color {get;set;} 
		public String DeductibleValueDescription {get;set;} 
		public String EngineNumber {get;set;} 
		public AccesoryType FuelType {get;set;} 
		public GPSProvider GPSProvider {get;set;} 
		public Boolean HasClaimComputableForBonusMalus {get;set;} 
		public Boolean HasGPS {get;set;} 
		public Boolean HasInspections {get;set;} 
		public Boolean Is0Km {get;set;} 
		public Boolean IsPatentedAtArg {get;set;} 
		public Boolean IsTruck10TT100KM {get;set;} 
		public GPSProvider Jurisdiction {get;set;} 
		public Object LessorName {get;set;} 
		public Object LicensePlate {get;set;} 
		public Object LienName {get;set;} 
		public Integer ModelCode {get;set;} 
		public String ModelName {get;set;} 
		public AccesoryType OriginCountry {get;set;} 
		public Integer OriginalCostNew {get;set;} 
		public String OtherBrandName {get;set;} 
		public String OtherModelName {get;set;} 
		public String OtherVersionName {get;set;} 
		public Boolean PolicyOwnerIsInsured {get;set;} 
		public String PrimaryNamedInsured {get;set;} 
		public AccesoryType ProductOffering {get;set;} 
		public String PublicId {get;set;} 
		public Object ROUTE {get;set;} 
		public RiskLocation RiskLocation {get;set;} 
		public GPSProvider ServiceType {get;set;} 
		public Integer StatedAmount {get;set;} 
		public Integer TargetPremium {get;set;} 
		public Integer TargetPremiumAfterTax {get;set;} 
		public AccesoryType Usage {get;set;} 
		public String VIN {get;set;} 
		public String VTVExpirationDate {get;set;} 
		public Integer VehicleNumber {get;set;} 
		public Integer VersionCode {get;set;} 
		public String VersionName {get;set;} 
		public Integer Year {get;set;} 
		public Integer CodigoInfoAuto {get;set;} 

		public Vehicle(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'Accesories') {
							Accesories = arrayOfAccesories(parser);
						} else if (text == 'AdditionalFuelType') {
							AdditionalFuelType = new AccesoryType(parser);
						} else if (text == 'AdditionalInterestContacts') {
							AdditionalInterestContacts = arrayOfAdditionalInterestContacts(parser);
						} else if (text == 'AutomaticAdjust') {
							AutomaticAdjust = new AccesoryType(parser);
						} else if (text == 'BonusMalus') {
							BonusMalus = new AccesoryType(parser);
						} else if (text == 'BrandCode') {
							BrandCode = parser.getIntegerValue();
						} else if (text == 'BrandName') {
							BrandName = parser.getText();
						} else if (text == 'CNRT') {
							CNRT = parser.readValueAs(Object.class);
						} else if (text == 'Category') {
							Category = new AccesoryType(parser);
						} else if (text == 'Census') {
							Census = parser.readValueAs(Object.class);
						} else if (text == 'CertificateDateGeneration') {
							CertificateDateGeneration = parser.readValueAs(Object.class);
						} else if (text == 'CertificateNumber') {
							CertificateNumber = parser.readValueAs(Object.class);
						} else if (text == 'Color') {
							Color = new AccesoryType(parser);
						} else if (text == 'DeductibleValueDescription') {
							DeductibleValueDescription = parser.getText();
						} else if (text == 'EngineNumber') {
							EngineNumber = parser.getText();
						} else if (text == 'FuelType') {
							FuelType = new AccesoryType(parser);
						} else if (text == 'GPSProvider') {
							GPSProvider = new GPSProvider(parser);
						} else if (text == 'HasClaimComputableForBonusMalus') {
							HasClaimComputableForBonusMalus = parser.getBooleanValue();
						} else if (text == 'HasGPS') {
							HasGPS = parser.getBooleanValue();
						} else if (text == 'HasInspections') {
							HasInspections = parser.getBooleanValue();
						} else if (text == 'Is0Km') {
							Is0Km = parser.getBooleanValue();
						} else if (text == 'IsPatentedAtArg') {
							IsPatentedAtArg = parser.getBooleanValue();
						} else if (text == 'IsTruck10TT100KM') {
							IsTruck10TT100KM = parser.getBooleanValue();
						} else if (text == 'Jurisdiction') {
							Jurisdiction = new GPSProvider(parser);
						} else if (text == 'LessorName') {
							LessorName = parser.readValueAs(Object.class);
						} else if (text == 'LicensePlate') {
							LicensePlate = parser.readValueAs(Object.class);
						} else if (text == 'LienName') {
							LienName = parser.readValueAs(Object.class);
						} else if (text == 'ModelCode') {
							ModelCode = parser.getIntegerValue();
						} else if (text == 'ModelName') {
							ModelName = parser.getText();
						} else if (text == 'OriginCountry') {
							OriginCountry = new AccesoryType(parser);
						} else if (text == 'OriginalCostNew') {
							OriginalCostNew = parser.getIntegerValue();
						} else if (text == 'OtherBrandName') {
							OtherBrandName = parser.getText();
						} else if (text == 'OtherModelName') {
							OtherModelName = parser.getText();
						} else if (text == 'OtherVersionName') {
							OtherVersionName = parser.getText();
						} else if (text == 'PolicyOwnerIsInsured') {
							PolicyOwnerIsInsured = parser.getBooleanValue();
						} else if (text == 'PrimaryNamedInsured') {
							PrimaryNamedInsured = parser.getText();
						} else if (text == 'ProductOffering') {
							ProductOffering = new AccesoryType(parser);
						} else if (text == 'PublicId') {
							PublicId = parser.getText();
						} else if (text == 'ROUTE') {
							ROUTE = parser.readValueAs(Object.class);
						} else if (text == 'RiskLocation') {
							RiskLocation = new RiskLocation(parser);
						} else if (text == 'ServiceType') {
							ServiceType = new GPSProvider(parser);
						} else if (text == 'StatedAmount') {
							StatedAmount = parser.getIntegerValue();
						} else if (text == 'TargetPremium') {
							TargetPremium = parser.getIntegerValue();
						} else if (text == 'TargetPremiumAfterTax') {
							TargetPremiumAfterTax = parser.getIntegerValue();
						} else if (text == 'Usage') {
							Usage = new AccesoryType(parser);
						} else if (text == 'VIN') {
							VIN = parser.getText();
						} else if (text == 'VTVExpirationDate') {
							VTVExpirationDate = parser.getText();
						} else if (text == 'VehicleNumber') {
							VehicleNumber = parser.getIntegerValue();
						} else if (text == 'VersionCode') {
							VersionCode = parser.getIntegerValue();
						} else if (text == 'VersionName') {
							VersionName = parser.getText();
						} else if (text == 'Year') {
							Year = parser.getIntegerValue();
						} else if (text == 'CodigoInfoAuto') {
							CodigoInfoAuto = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Vehicle consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class AdditionalInterestContacts {

		public AdditionalInterestContacts(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							System.debug(LoggingLevel.WARN, 'AdditionalInterestContacts consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class RiskLocation {
		public Object Block {get;set;} 
		public Object City {get;set;} 
		public AccesoryType Country {get;set;} 
		public Object Department {get;set;} 
		public String DisplayName {get;set;} 
		public Object Floor {get;set;} 
		public Object LocationCode {get;set;} 
		public Object LocationName {get;set;} 
		public Object Phone {get;set;} 
		public GPSProvider PhoneCountry {get;set;} 
		public String PostalCode {get;set;} 
		public String PublicID {get;set;} 
		public AccesoryType State {get;set;} 
		public Object Street {get;set;} 
		public Object StreetNumber {get;set;} 
		public Object Type_Z {get;set;} // in json: Type
		public Object policyPeriodID {get;set;} 
		public Object vehiclePublicID {get;set;} 

		public RiskLocation(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'Block') {
							Block = parser.readValueAs(Object.class);
						} else if (text == 'City') {
							City = parser.readValueAs(Object.class);
						} else if (text == 'Country') {
							Country = new AccesoryType(parser);
						} else if (text == 'Department') {
							Department = parser.readValueAs(Object.class);
						} else if (text == 'DisplayName') {
							DisplayName = parser.getText();
						} else if (text == 'Floor') {
							Floor = parser.readValueAs(Object.class);
						} else if (text == 'LocationCode') {
							LocationCode = parser.readValueAs(Object.class);
						} else if (text == 'LocationName') {
							LocationName = parser.readValueAs(Object.class);
						} else if (text == 'Phone') {
							Phone = parser.readValueAs(Object.class);
						} else if (text == 'PhoneCountry') {
							PhoneCountry = new GPSProvider(parser);
						} else if (text == 'PostalCode') {
							PostalCode = parser.getText();
						} else if (text == 'PublicID') {
							PublicID = parser.getText();
						} else if (text == 'State') {
							State = new AccesoryType(parser);
						} else if (text == 'Street') {
							Street = parser.readValueAs(Object.class);
						} else if (text == 'StreetNumber') {
							StreetNumber = parser.readValueAs(Object.class);
						} else if (text == 'Type') {
							Type_Z = parser.readValueAs(Object.class);
						} else if (text == 'policyPeriodID') {
							policyPeriodID = parser.readValueAs(Object.class);
						} else if (text == 'vehiclePublicID') {
							vehiclePublicID = parser.readValueAs(Object.class);
						} else {
							System.debug(LoggingLevel.WARN, 'RiskLocation consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class InsuredAmountCost {
		public Integer Amount {get;set;} 
		public String cCurrency {get;set;} 
		public String Description {get;set;} 

		public InsuredAmountCost(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'Amount') {
							Amount = parser.getIntegerValue();
						} else if (text == 'Currency') {
							cCurrency = parser.getText();
						} else if (text == 'Description') {
							Description = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'InsuredAmountCost consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class GPSProvider {
		public Object Code {get;set;} 
		public Object Description {get;set;} 

		public GPSProvider(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'Code') {
							Code = parser.readValueAs(Object.class);
						} else if (text == 'Description') {
							Description = parser.readValueAs(Object.class);
						} else {
							System.debug(LoggingLevel.WARN, 'GPSProvider consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class AccesoryType {
		public String Code {get;set;} 
		public String Description {get;set;} 

		public AccesoryType(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'Code') {
							Code = parser.getText();
						} else if (text == 'Description') {
							Description = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'AccesoryType consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public String PolicyPeriodId {get;set;} 
	public Vehicle Vehicle {get;set;} 

	public SCActualizarAutoRequest(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'PolicyPeriodId') {
						PolicyPeriodId = parser.getText();
					} else if (text == 'Vehicle') {
						Vehicle = new Vehicle(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'SCActualizarAutoRequest consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	
	public static SCActualizarAutoRequest parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new SCActualizarAutoRequest(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	






    private static List<AdditionalInterestContacts> arrayOfAdditionalInterestContacts(System.JSONParser p) {
        List<AdditionalInterestContacts> res = new List<AdditionalInterestContacts>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new AdditionalInterestContacts(p));
        }
        return res;
    }





    private static List<Accesories> arrayOfAccesories(System.JSONParser p) {
        List<Accesories> res = new List<Accesories>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Accesories(p));
        }
        return res;
    }





}