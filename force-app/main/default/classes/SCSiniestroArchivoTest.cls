@isTest
public with sharing class SCSiniestroArchivoTest {

    /*
    Falta recibir request y response v치lidos por parte de SC para poder hacer correctamente los tests.
    */

    @isTest
    static void testRegistrarArchivoDeSiniestroSuccess() {
        Test.setMock(HttpCalloutMock.class, new SCSiniestroArchivosMockSuccess());
  
        test.StartTest();
        SCSiniestroArchivo.Wrapper wrapper = new SCSiniestroArchivo.Wrapper();
        wrapper = SCSiniestroArchivo.registrarArchivoDeSiniestro('string', 'string', 'string', 'string', 'string');
        
        test.stopTest();
  
        System.assertEquals(false, wrapper.hasError, 'La conexi칩n fue devuelta sin errores.');
    }

    @isTest
    static void testRegistrarArchivoDeSiniestroFail() {
        Test.setMock(HttpCalloutMock.class, new SCSiniestroArchivosMockFail());
  
        test.StartTest();
        SCSiniestroArchivo.Wrapper wrapper = new SCSiniestroArchivo.Wrapper();
        wrapper = SCSiniestroArchivo.registrarArchivoDeSiniestro('string', 'string', 'string', 'string', 'string');
        test.stopTest();
  
        System.assertEquals(true, wrapper.hasError, 'La conexi칩n fue exitosa.');
    }

    @isTest
    static void testRegistrarArchivoDeSiniestroFail500() {
        Test.setMock(HttpCalloutMock.class, new SCSiniestroArchivosMockFail500());
  
        test.StartTest();
        SCSiniestroArchivo.Wrapper wrapper = new SCSiniestroArchivo.Wrapper();
        wrapper = SCSiniestroArchivo.registrarArchivoDeSiniestro('string', 'string', 'string', 'string', 'string');
        test.stopTest();
  
        System.assertEquals(true, wrapper.hasError, 'La conexi칩n fue exitosa.');
    } 
}