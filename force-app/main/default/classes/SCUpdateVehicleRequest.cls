//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class SCUpdateVehicleRequest {
    public SCUpdateVehicleRequest(){}

	public class PreferredSettlementCurrency {
        public PreferredSettlementCurrency(){}
		public String Code {get;set;} 
		public String Description {get;set;} 
		public Boolean Selected {get;set;} 

		public PreferredSettlementCurrency(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'Code') {
							Code = parser.getText();
						} else if (text == 'Description') {
							Description = parser.getText();
						} else if (text == 'Selected') {
							Selected = parser.getBooleanValue();
						} else {
							System.debug(LoggingLevel.WARN, 'PreferredSettlementCurrency consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public String PolicyPeriodId {get;set;} 
	public Vehicle Vehicle {get;set;} 

	public SCUpdateVehicleRequest(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'PolicyPeriodId') {
						PolicyPeriodId = parser.getText();
					} else if (text == 'Vehicle') {
						Vehicle = new Vehicle(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'SCUpdateVehicleRequest consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class InsuredAmountCost {
        public InsuredAmountCost(){}
		public Integer Amount {get;set;} 
		public String cCurrency {get;set;} 
		public String Description {get;set;} 

		public InsuredAmountCost(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'Amount') {
							Amount = parser.getIntegerValue();
						} else if (text == 'Currency') {
							cCurrency = parser.getText();
						} else if (text == 'Description') {
							Description = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'InsuredAmountCost consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class AvailablePhoneNumbers {
        public AvailablePhoneNumbers(){}
		public AccesoryType PhoneCountry {get;set;} 
		public String PhoneNumber {get;set;} 
		public AccesoryType PhoneType {get;set;} 

		public AvailablePhoneNumbers(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'PhoneCountry') {
							PhoneCountry = new AccesoryType(parser);
						} else if (text == 'PhoneNumber') {
							PhoneNumber = parser.getText();
						} else if (text == 'PhoneType') {
							PhoneType = new AccesoryType(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'AvailablePhoneNumbers consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class AccesoryType {
        public AccesoryType(){}
		public String Code {get;set;} 
		public String Description {get;set;} 

		public AccesoryType(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'Code') {
							Code = parser.getText();
						} else if (text == 'Description') {
							Description = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'AccesoryType consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class TaxStatuses {
        public TaxStatuses(){}
		public AccesoryType EnrollementStatus {get;set;} 
		public String PublicID {get;set;} 
		public AccesoryType RetentionAgent {get;set;} 
		public String StatusValue {get;set;} 
		public Integer TaxPercentage {get;set;} 

		public TaxStatuses(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'EnrollementStatus') {
							EnrollementStatus = new AccesoryType(parser);
						} else if (text == 'PublicID') {
							PublicID = parser.getText();
						} else if (text == 'RetentionAgent') {
							RetentionAgent = new AccesoryType(parser);
						} else if (text == 'StatusValue') {
							StatusValue = parser.getText();
						} else if (text == 'TaxPercentage') {
							TaxPercentage = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'TaxStatuses consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Contact {
        public Contact(){}
		public String Activitystartdate {get;set;} 
		public List<Addresses> Addresses {get;set;} 
		public Attorney Attorney {get;set;} 
		public List<AvailablePhoneNumbers> AvailablePhoneNumbers {get;set;} 
		public String CUIL {get;set;} 
		public AccesoryType ContactType {get;set;} 
		public String DateOfBirth {get;set;} 
		public String EmailAddress1 {get;set;} 
		public String EmailAddress2 {get;set;} 
		public String FirstName {get;set;} 
		public AccesoryType Gender {get;set;} 
		public AccesoryType Industry {get;set;} 
		public String InsuredNumberFormated {get;set;} 
		public String LastName {get;set;} 
		public MaritalStatus MaritalStatus {get;set;} 
		public String Name {get;set;} 
		public AccesoryType Nationality {get;set;} 
		public AccesoryType Occupation {get;set;} 
		public AccesoryType OfficialIDType {get;set;} 
		public Boolean PEP {get;set;} 
		public PreferredSettlementCurrency PreferredSettlementCurrency {get;set;} 
		public Boolean PrimaryNamedInsured {get;set;} 
		public AccesoryType PrimaryPhoneType {get;set;} 
		public String PublicID {get;set;} 
		public Boolean Resident {get;set;} 
		public AccesoryType SchoolLevel {get;set;} 
		public String TaxID {get;set;} 
		public List<TaxStatuses> TaxStatuses {get;set;} 
		public Boolean UIFFormSubmitted {get;set;} 

		public Contact(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'Activitystartdate') {
							Activitystartdate = parser.getText();
						} else if (text == 'Addresses') {
							Addresses = arrayOfAddresses(parser);
						} else if (text == 'Attorney') {
							Attorney = new Attorney(parser);
						} else if (text == 'AvailablePhoneNumbers') {
							AvailablePhoneNumbers = arrayOfAvailablePhoneNumbers(parser);
						} else if (text == 'CUIL') {
							CUIL = parser.getText();
						} else if (text == 'ContactType') {
							ContactType = new AccesoryType(parser);
						} else if (text == 'DateOfBirth') {
							DateOfBirth = parser.getText();
						} else if (text == 'EmailAddress1') {
							EmailAddress1 = parser.getText();
						} else if (text == 'EmailAddress2') {
							EmailAddress2 = parser.getText();
						} else if (text == 'FirstName') {
							FirstName = parser.getText();
						} else if (text == 'Gender') {
							Gender = new AccesoryType(parser);
						} else if (text == 'Industry') {
							Industry = new AccesoryType(parser);
						} else if (text == 'InsuredNumberFormated') {
							InsuredNumberFormated = parser.getText();
						} else if (text == 'LastName') {
							LastName = parser.getText();
						} else if (text == 'MaritalStatus') {
							MaritalStatus = new MaritalStatus(parser);
						} else if (text == 'Name') {
							Name = parser.getText();
						} else if (text == 'Nationality') {
							Nationality = new AccesoryType(parser);
						} else if (text == 'Occupation') {
							Occupation = new AccesoryType(parser);
						} else if (text == 'OfficialIDType') {
							OfficialIDType = new AccesoryType(parser);
						} else if (text == 'PEP') {
							PEP = parser.getBooleanValue();
						} else if (text == 'PreferredSettlementCurrency') {
							PreferredSettlementCurrency = new PreferredSettlementCurrency(parser);
						} else if (text == 'PrimaryNamedInsured') {
							PrimaryNamedInsured = parser.getBooleanValue();
						} else if (text == 'PrimaryPhoneType') {
							PrimaryPhoneType = new AccesoryType(parser);
						} else if (text == 'PublicID') {
							PublicID = parser.getText();
						} else if (text == 'Resident') {
							Resident = parser.getBooleanValue();
						} else if (text == 'SchoolLevel') {
							SchoolLevel = new AccesoryType(parser);
						} else if (text == 'TaxID') {
							TaxID = parser.getText();
						} else if (text == 'TaxStatuses') {
							TaxStatuses = arrayOfTaxStatuses(parser);
						} else if (text == 'UIFFormSubmitted') {
							UIFFormSubmitted = parser.getBooleanValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Contact consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Accesories {
        public Accesories(){}
		public AccesoryType AccesoryType {get;set;} 
		public String Brand {get;set;} 
		public InsuredAmountCost InsuredAmountCost {get;set;} 
		public String Model {get;set;} 
		public String OtherAccesoryTypeName {get;set;} 
		public String PublicID {get;set;} 
		public String SerieNumber {get;set;} 

		public Accesories(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'AccesoryType') {
							AccesoryType = new AccesoryType(parser);
						} else if (text == 'Brand') {
							Brand = parser.getText();
						} else if (text == 'InsuredAmountCost') {
							InsuredAmountCost = new InsuredAmountCost(parser);
						} else if (text == 'Model') {
							Model = parser.getText();
						} else if (text == 'OtherAccesoryTypeName') {
							OtherAccesoryTypeName = parser.getText();
						} else if (text == 'PublicID') {
							PublicID = parser.getText();
						} else if (text == 'SerieNumber') {
							SerieNumber = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Accesories consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Addresses {
        public Addresses(){}
		public String policyPeriodID {get;set;} 
		public Boolean updateLinkedAddresses {get;set;} 
		public String AddressLine1 {get;set;} 
		public String AddressLine2 {get;set;} 
		public String AddressLine3 {get;set;} 
		public AccesoryType AddressType {get;set;} 
		public String Block {get;set;} 
		public String City {get;set;} 
		public AccesoryType Country {get;set;} 
		public String County {get;set;} 
		public String Description {get;set;} 
		public String DisplayText {get;set;} 
		public Boolean PolicyAddress {get;set;} 
		public String PostalCode {get;set;} 
		public Boolean PrimaryAddress {get;set;} 
		public String PublicID {get;set;} 
		public AccesoryType State {get;set;} 
		public String StreetNumber {get;set;} 

		public Addresses(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'policyPeriodID') {
							policyPeriodID = parser.getText();
						} else if (text == 'updateLinkedAddresses') {
							updateLinkedAddresses = parser.getBooleanValue();
						} else if (text == 'AddressLine1') {
							AddressLine1 = parser.getText();
						} else if (text == 'AddressLine2') {
							AddressLine2 = parser.getText();
						} else if (text == 'AddressLine3') {
							AddressLine3 = parser.getText();
						} else if (text == 'AddressType') {
							AddressType = new AccesoryType(parser);
						} else if (text == 'Block') {
							Block = parser.getText();
						} else if (text == 'City') {
							City = parser.getText();
						} else if (text == 'Country') {
							Country = new AccesoryType(parser);
						} else if (text == 'County') {
							County = parser.getText();
						} else if (text == 'Description') {
							Description = parser.getText();
						} else if (text == 'DisplayText') {
							DisplayText = parser.getText();
						} else if (text == 'PolicyAddress') {
							PolicyAddress = parser.getBooleanValue();
						} else if (text == 'PostalCode') {
							PostalCode = parser.getText();
						} else if (text == 'PrimaryAddress') {
							PrimaryAddress = parser.getBooleanValue();
						} else if (text == 'PublicID') {
							PublicID = parser.getText();
						} else if (text == 'State') {
							State = new AccesoryType(parser);
						} else if (text == 'StreetNumber') {
							StreetNumber = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Addresses consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Vehicle {
        public Vehicle(){}
		public List<Accesories> Accesories {get;set;} 
		public AccesoryType AdditionalFuelType {get;set;} 
		public List<AdditionalInterestContacts> AdditionalInterestContacts {get;set;} 
		public AccesoryType AutomaticAdjust {get;set;} 
		public AccesoryType BonusMalus {get;set;} 
		public Integer BrandCode {get;set;} 
		public String BrandName {get;set;} 
		public String CNRT {get;set;} 
		public AccesoryType Category {get;set;} 
		public String Census {get;set;} 
		public String CertificateDateGeneration {get;set;} 
		public String CertificateNumber {get;set;} 
		public AccesoryType Color {get;set;} 
		public String DeductibleValueDescription {get;set;} 
		public String EngineNumber {get;set;} 
		public AccesoryType FuelType {get;set;} 
		public AccesoryType GPSProvider {get;set;} 
		public Boolean HasClaimComputableForBonusMalus {get;set;} 
		public Boolean HasGPS {get;set;} 
		public Boolean HasInspections {get;set;} 
		public Boolean Is0Km {get;set;} 
		public Boolean IsPatentedAtArg {get;set;} 
		public Boolean IsTruck10TT100KM {get;set;} 
		public AccesoryType Jurisdiction {get;set;} 
		public String LessorName {get;set;} 
		public String LicensePlate {get;set;} 
		public String LienName {get;set;} 
		public Integer ModelCode {get;set;} 
		public String ModelName {get;set;} 
		public AccesoryType OriginCountry {get;set;} 
		public Integer OriginalCostNew {get;set;} 
		public String OtherBrandName {get;set;} 
		public String OtherModelName {get;set;} 
		public String OtherVersionName {get;set;} 
		public Boolean PolicyOwnerIsInsured {get;set;} 
		public String PrimaryNamedInsured {get;set;} 
		public AccesoryType ProductOffering {get;set;} 
		public String PublicId {get;set;} 
		public String ROUTE {get;set;} 
		public RiskLocation RiskLocation {get;set;} 
		public AccesoryType ServiceType {get;set;} 
		public Integer StatedAmount {get;set;} 
		public Integer TargetPremium {get;set;} 
		public Integer TargetPremiumAfterTax {get;set;} 
		public AccesoryType Usage {get;set;} 
		public String VIN {get;set;} 
		public String VTVExpirationDate {get;set;} 
		public Integer VehicleNumber {get;set;} 
		public Integer VersionCode {get;set;} 
		public String VersionName {get;set;} 
		public Integer Year {get;set;} 
		public Integer CodigoInfoAuto {get;set;} 

		public Vehicle(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'Accesories') {
							Accesories = arrayOfAccesories(parser);
						} else if (text == 'AdditionalFuelType') {
							AdditionalFuelType = new AccesoryType(parser);
						} else if (text == 'AdditionalInterestContacts') {
							AdditionalInterestContacts = arrayOfAdditionalInterestContacts(parser);
						} else if (text == 'AutomaticAdjust') {
							AutomaticAdjust = new AccesoryType(parser);
						} else if (text == 'BonusMalus') {
							BonusMalus = new AccesoryType(parser);
						} else if (text == 'BrandCode') {
							BrandCode = parser.getIntegerValue();
						} else if (text == 'BrandName') {
							BrandName = parser.getText();
						} else if (text == 'CNRT') {
							CNRT = parser.getText();
						} else if (text == 'Category') {
							Category = new AccesoryType(parser);
						} else if (text == 'Census') {
							Census = parser.getText();
						} else if (text == 'CertificateDateGeneration') {
							CertificateDateGeneration = parser.getText();
						} else if (text == 'CertificateNumber') {
							CertificateNumber = parser.getText();
						} else if (text == 'Color') {
							Color = new AccesoryType(parser);
						} else if (text == 'DeductibleValueDescription') {
							DeductibleValueDescription = parser.getText();
						} else if (text == 'EngineNumber') {
							EngineNumber = parser.getText();
						} else if (text == 'FuelType') {
							FuelType = new AccesoryType(parser);
						} else if (text == 'GPSProvider') {
							GPSProvider = new AccesoryType(parser);
						} else if (text == 'HasClaimComputableForBonusMalus') {
							HasClaimComputableForBonusMalus = parser.getBooleanValue();
						} else if (text == 'HasGPS') {
							HasGPS = parser.getBooleanValue();
						} else if (text == 'HasInspections') {
							HasInspections = parser.getBooleanValue();
						} else if (text == 'Is0Km') {
							Is0Km = parser.getBooleanValue();
						} else if (text == 'IsPatentedAtArg') {
							IsPatentedAtArg = parser.getBooleanValue();
						} else if (text == 'IsTruck10TT100KM') {
							IsTruck10TT100KM = parser.getBooleanValue();
						} else if (text == 'Jurisdiction') {
							Jurisdiction = new AccesoryType(parser);
						} else if (text == 'LessorName') {
							LessorName = parser.getText();
						} else if (text == 'LicensePlate') {
							LicensePlate = parser.getText();
						} else if (text == 'LienName') {
							LienName = parser.getText();
						} else if (text == 'ModelCode') {
							ModelCode = parser.getIntegerValue();
						} else if (text == 'ModelName') {
							ModelName = parser.getText();
						} else if (text == 'OriginCountry') {
							OriginCountry = new AccesoryType(parser);
						} else if (text == 'OriginalCostNew') {
							OriginalCostNew = parser.getIntegerValue();
						} else if (text == 'OtherBrandName') {
							OtherBrandName = parser.getText();
						} else if (text == 'OtherModelName') {
							OtherModelName = parser.getText();
						} else if (text == 'OtherVersionName') {
							OtherVersionName = parser.getText();
						} else if (text == 'PolicyOwnerIsInsured') {
							PolicyOwnerIsInsured = parser.getBooleanValue();
						} else if (text == 'PrimaryNamedInsured') {
							PrimaryNamedInsured = parser.getText();
						} else if (text == 'ProductOffering') {
							ProductOffering = new AccesoryType(parser);
						} else if (text == 'PublicId') {
							PublicId = parser.getText();
						} else if (text == 'ROUTE') {
							ROUTE = parser.getText();
						} else if (text == 'RiskLocation') {
							RiskLocation = new RiskLocation(parser);
						} else if (text == 'ServiceType') {
							ServiceType = new AccesoryType(parser);
						} else if (text == 'StatedAmount') {
							StatedAmount = parser.getIntegerValue();
						} else if (text == 'TargetPremium') {
							TargetPremium = parser.getIntegerValue();
						} else if (text == 'TargetPremiumAfterTax') {
							TargetPremiumAfterTax = parser.getIntegerValue();
						} else if (text == 'Usage') {
							Usage = new AccesoryType(parser);
						} else if (text == 'VIN') {
							VIN = parser.getText();
						} else if (text == 'VTVExpirationDate') {
							VTVExpirationDate = parser.getText();
						} else if (text == 'VehicleNumber') {
							VehicleNumber = parser.getIntegerValue();
						} else if (text == 'VersionCode') {
							VersionCode = parser.getIntegerValue();
						} else if (text == 'VersionName') {
							VersionName = parser.getText();
						} else if (text == 'Year') {
							Year = parser.getIntegerValue();
						} else if (text == 'CodigoInfoAuto') {
							CodigoInfoAuto = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Vehicle consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class MaritalStatus {
        public MaritalStatus(){}
		public String Code {get;set;} 
		public String DisplayName {get;set;} 

		public MaritalStatus(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'Code') {
							Code = parser.getText();
						} else if (text == 'DisplayName') {
							DisplayName = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'MaritalStatus consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class AdditionalInterestContacts {
        public AdditionalInterestContacts(){}
		public AccesoryType AdditionalInterestType {get;set;} 
		public Contact Contact {get;set;} 
		public String ContractNumber {get;set;} 
		public Boolean IsCertRequired {get;set;} 
		public String Name {get;set;} 
		public String PublicID {get;set;} 

		public AdditionalInterestContacts(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'AdditionalInterestType') {
							AdditionalInterestType = new AccesoryType(parser);
						} else if (text == 'Contact') {
							Contact = new Contact(parser);
						} else if (text == 'ContractNumber') {
							ContractNumber = parser.getText();
						} else if (text == 'IsCertRequired') {
							IsCertRequired = parser.getBooleanValue();
						} else if (text == 'Name') {
							Name = parser.getText();
						} else if (text == 'PublicID') {
							PublicID = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'AdditionalInterestContacts consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class RiskLocation {
        public RiskLocation(){}
		public String Block {get;set;} 
		public String City {get;set;} 
		public AccesoryType Country {get;set;} 
		public String Department {get;set;} 
		public String DisplayName {get;set;} 
		public String Floor {get;set;} 
		public String LocationCode {get;set;} 
		public String LocationName {get;set;} 
		public String Phone {get;set;} 
		public AccesoryType PhoneCountry {get;set;} 
		public String PostalCode {get;set;} 
		public String PublicID {get;set;} 
		public AccesoryType State {get;set;} 
		public String Street {get;set;} 
		public String StreetNumber {get;set;} 
		public AccesoryType Type_Z {get;set;} // in json: Type
		public String policyPeriodID {get;set;} 
		public String vehiclePublicID {get;set;} 

		public RiskLocation(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'Block') {
							Block = parser.getText();
						} else if (text == 'City') {
							City = parser.getText();
						} else if (text == 'Country') {
							Country = new AccesoryType(parser);
						} else if (text == 'Department') {
							Department = parser.getText();
						} else if (text == 'DisplayName') {
							DisplayName = parser.getText();
						} else if (text == 'Floor') {
							Floor = parser.getText();
						} else if (text == 'LocationCode') {
							LocationCode = parser.getText();
						} else if (text == 'LocationName') {
							LocationName = parser.getText();
						} else if (text == 'Phone') {
							Phone = parser.getText();
						} else if (text == 'PhoneCountry') {
							PhoneCountry = new AccesoryType(parser);
						} else if (text == 'PostalCode') {
							PostalCode = parser.getText();
						} else if (text == 'PublicID') {
							PublicID = parser.getText();
						} else if (text == 'State') {
							State = new AccesoryType(parser);
						} else if (text == 'Street') {
							Street = parser.getText();
						} else if (text == 'StreetNumber') {
							StreetNumber = parser.getText();
						} else if (text == 'Type') {
							Type_Z = new AccesoryType(parser);
						} else if (text == 'policyPeriodID') {
							policyPeriodID = parser.getText();
						} else if (text == 'vehiclePublicID') {
							vehiclePublicID = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'RiskLocation consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Attorney {
        public Attorney(){}
		public String DocumentNumber {get;set;} 
		public String FirstName {get;set;} 
		public AccesoryType Gender {get;set;} 
		public AccesoryType IDDocumentType {get;set;} 
		public String LastName {get;set;} 

		public Attorney(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'DocumentNumber') {
							DocumentNumber = parser.getText();
						} else if (text == 'FirstName') {
							FirstName = parser.getText();
						} else if (text == 'Gender') {
							Gender = new AccesoryType(parser);
						} else if (text == 'IDDocumentType') {
							IDDocumentType = new AccesoryType(parser);
						} else if (text == 'LastName') {
							LastName = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Attorney consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static SCUpdateVehicleRequest parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new SCUpdateVehicleRequest(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	



    private static List<TaxStatuses> arrayOfTaxStatuses(System.JSONParser p) {
        List<TaxStatuses> res = new List<TaxStatuses>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new TaxStatuses(p));
        }
        return res;
    }





    private static List<Addresses> arrayOfAddresses(System.JSONParser p) {
        List<Addresses> res = new List<Addresses>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Addresses(p));
        }
        return res;
    }



    private static List<Accesories> arrayOfAccesories(System.JSONParser p) {
        List<Accesories> res = new List<Accesories>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Accesories(p));
        }
        return res;
    }




    private static List<AdditionalInterestContacts> arrayOfAdditionalInterestContacts(System.JSONParser p) {
        List<AdditionalInterestContacts> res = new List<AdditionalInterestContacts>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new AdditionalInterestContacts(p));
        }
        return res;
    }








    private static List<AvailablePhoneNumbers> arrayOfAvailablePhoneNumbers(System.JSONParser p) {
        List<AvailablePhoneNumbers> res = new List<AvailablePhoneNumbers>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new AvailablePhoneNumbers(p));
        }
        return res;
    }




}